# Windsurf configuration for an Angular (TypeScript) project

language: typescript
framework: angular
build: npm run build
start: npm start
output: dist
include:

- src/\*\*
- package.json
- tsconfig.json
- angular.json
  exclude:
- node_modules/\*\*
- dist/\*\*
- .git/\*\*

# ===========================

# Frontend (Angular and Typescript)

# ===========================

frontend:
path: frontend/
language: typescript
framework: angular
build: npm run build
start: npm start
output: dist
include: - frontend/src/\*\* - frontend/package.json - frontend/angular.json - frontend/tsconfig.json

You are an expert in TypeScript, Angular, and scalable web application development. You write maintainable, performant, and accessible code following Angular and TypeScript best practices:

## TypeScript Best Practices

- Use strict type checking
- Prefer type inference when the type is obvious
- Avoid the `any` type; use `unknown` when type is uncertain

## Angular Best Practices

- Always use standalone components over NgModules
- Don't use explicit `standalone: true` (it is implied by default)
- Use signals for state management
- Implement lazy loading for feature routes
- Use `NgOptimizedImage` for all static images.

## Components

- Keep components small and focused on a single responsibility
- Use `input()` and `output()` functions instead of decorators
- Use `computed()` for derived state
- Set `changeDetection: ChangeDetectionStrategy.OnPush` in `@Component` decorator
- Prefer inline templates for small components
- Prefer Reactive forms instead of Template-driven ones
- Important: Do NOT use `ngClass`, use `class` bindings instead
- Important: Do NOT use `ngStyle`, use `style` bindings instead

## State Management

- Use signals for local component state
- Use `computed()` for derived state
- Keep state transformations pure and predictable

## Templates

- Keep templates simple and avoid complex logic
- Important: Do NOT use `*ngIf`, `*ngFor`, `*ngSwitch`
- Use native control flow (`@if`, `@for`, `@switch`) instead of `*ngIf`, `*ngFor`, `*ngSwitch`
- Use the async pipe to handle observables
- Always add one blank line between sibling elements in html files

## UI components

- Avoid custom and inline styles when possible
- Use Angular's built-in components when possible
- Use Angular Material components when possible, for example use:
  - `MatCard` for cards
  - `MatButton` for buttons
  - `MatIcon` for icons
  - etc.

## Services

- Design services around a single responsibility
- Use the `providedIn: 'root'` option for singleton services
- Do not use the constructor to inject services, instead use the `inject()` function

For typescript specific code:

# General Code Style & Formatting

- Use English for all code and documentation.
- Always declare the type of each variable and function (parameters and return value).
- Avoid using any.
- Create necessary types.
- Use JSDoc to document public classes and methods.
- Don't leave blank lines within a function.
- One export per file.

# Naming Conventions

- Use PascalCase for classes.
- Use camelCase for variables, functions, and methods.
- Use kebab-case for file and directory names.
- Use UPPERCASE for environment variables.
- Avoid magic numbers and define constants.

# Functions & Logic

- Keep functions short and single-purpose (<20 lines).
- Avoid deeply nested blocks by:
- Using early returns.
- Extracting logic into utility functions.
- Use higher-order functions (map, filter, reduce) to simplify logic.
- Use arrow functions for simple cases (<3 instructions), named functions otherwise.
- Use default parameter values instead of null/undefined checks.
- Use RO-RO (Receive Object, Return Object) for passing and returning multiple parameters.

# Data Handling

- Avoid excessive use of primitive types; encapsulate data in composite types.
- Avoid placing validation inside functionsâ€”use classes with internal validation instead.
- Prefer immutability for data:
- Use readonly for immutable properties.
- Use as const for literals that never change.

# ===========================

# Backend (Node.js/Express)

# ===========================
